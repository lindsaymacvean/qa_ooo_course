using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace Supermarket
{
    public class OfferList : KeyedCollection<int, BasketItem>
    {
        // A Keyed collection of offers generated by the Basket
        // This provides and easy way to check which offers are currently applicable
        protected override int GetKeyForItem(BasketItem item)
        {
            return item.OfferID;
        }

        protected override void InsertItem(int index, BasketItem item)
        {
            // If the item does not have an Offer or
            // If the Keyed Collection already has the offer
            // then return
            if (item.Offer == null || this.Contains(item.OfferID))
                return;
            else
            {
                // Add the product to the Offers list of active products
                item.Offer.Products.Add(item.ProductID);
                base.InsertItem(index, item);
            }
        }

        protected override void RemoveItem(int index)
        {
            // Had to use Linq ElementAt as a workaround because the
            // index seemed to come across as an index instead of key
            int productID = this.ElementAt(index).ProductID;
            this.ElementAt(index).Offer.Products.Remove(productID);
            // Only remove the offer from this list if its quantity is < 1
            if (this.ElementAt(index).Offer.Quantity < 1 )
                base.RemoveItem(index);
        }

        public void CalculateOffers(ShoppingBasket basket)
        {
            foreach (BasketItem item in this)
            {
                //Take each offer and see if its conditions have been met
                switch(item.OfferID)
                {
                    //Buy One Get One Free
                    case 1:
                        foreach (int productID in item.Offer.Products)
                        {
                            int freeItems = (basket[productID].Quantity - (basket[productID].Quantity % 2)) / 2;
                            item.DiscountAmount = decimal.Multiply(freeItems, basket[productID].UnitPrice);
                        }
                        break;
                    //Three for the Price of Two (sandwiches)
                    case 2:
                        break;
                    //Three for the Price of Two (milk)
                    case 3:
                        break;
                    //10% off
                    case 4:
                        foreach (int productID in item.Offer.Products)
                        {
                            decimal totalProductValue = decimal.Multiply(basket[productID].Quantity, basket[productID].UnitPrice);
                            item.DiscountAmount = (decimal)totalProductValue/(decimal)item.Offer.DiscountPercentage;
                        }
                        break;
                    default:
                        return;
                }

            }
        }
    }
}